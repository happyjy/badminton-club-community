generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  kakaoId            String               @unique @default("")
  email              String               @unique
  nickname           String               @default("")
  thumbnailImageUrl  String               @default("")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt

  // 관계 설정
  WorkoutParticipant WorkoutParticipant[]
  workouts           Workout[]            @relation("WorkoutParticipants")
  clubMemberships    ClubMember[]
}

model Workout {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String               @default("")    
  date               DateTime
  startTime          DateTime
  endTime            DateTime
  maxParticipants    Int
  location           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  clubId             Int?

  //
  WorkoutParticipant WorkoutParticipant[]
  participants       User[]               @relation("WorkoutParticipants")
  club               Club?                 @relation(fields: [clubId], references: [id])
}

model WorkoutParticipant {
  id        Int      @id @default(autoincrement())
  workoutId Int
  userId    Int
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id])
  Workout   Workout  @relation(fields: [workoutId], references: [id])

  @@unique([workoutId, userId])
}

model Club {
  id          Int       @id @default(autoincrement())
  name        String    // 클럽 이름
  description String?   // 클럽 설명
  location    String    // 체육관 장소
  meetingTime String    // 운동 시간
  maxMembers  Int       // 최대 회원 수
  etc         String?   // 기타 정보
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 관계 설정
  members     ClubMember[]  
  workouts    Workout[]
}

model ClubMember {
  id        Int      @id @default(autoincrement())
  clubId    Int
  userId    Int
  role      Role     @default(MEMBER)
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계 설정
  club      Club     @relation(fields: [clubId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([clubId, userId])
}

enum Role {
  ADMIN
  MEMBER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
