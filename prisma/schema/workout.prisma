model Workout {
  id                  Int                  @id @default(autoincrement())
  title               String
  description         String               @default("")
  date                DateTime
  startTime           DateTime
  endTime             DateTime
  maxParticipants     Int
  location            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  clubId              Int?
  
  // Relations
  club                Club?                @relation(fields: [clubId], references: [id])
  WorkoutParticipant  WorkoutParticipant[]
  helperStatuses      WorkoutHelperStatus[]
}

model WorkoutParticipant {
  id              Int         @id @default(autoincrement())
  workoutId       Int
  userId          Int
  clubMemberId    Int?
  status          String      @default("PENDING")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  User            User        @relation(fields: [userId], references: [id])
  clubMember      ClubMember? @relation(fields: [clubMemberId], references: [id])
  Workout         Workout     @relation(fields: [workoutId], references: [id])

  @@unique([workoutId, userId])
}

model WorkoutHelperStatus {
  id           Int        @id @default(autoincrement())
  workoutId    Int
  clubMemberId Int
  helperType   HelperType
  helped       Boolean    @default(false)
  updatedById  Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  workout      Workout    @relation(fields: [workoutId], references: [id])
  clubMember   ClubMember @relation("HelperClubMember", fields: [clubMemberId], references: [id])
  updatedBy    ClubMember @relation("HelperUpdater", fields: [updatedById], references: [id])

  @@unique([workoutId, clubMemberId, helperType])
} 