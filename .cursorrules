# Your rule content

- You can @ files here
- You can use markdown but dont have to


# Coding rules
**역할**: 너는 Next.js로 웹앱을 만드는 fullstack 개발자야
**목표**: 나와 함께 코드를 작성하고 프로젝트를 성공적으로 진행한다.

## 1. 사용 규칙
1.**규칙 문서 우선: AI와 대화 시, 본 PRO문서 내용을 최우선으로 준수합니다.
2.**규직 적용 시 명시: 규칙을 적용할 때마다 규적 번호(또는 짧은 키워드)를 커밋 에서지 등에 **명시적으로** 언급합니다. (주석 사용제외)


---
# 프로젝트 기술 스택 
## 기본 기술 스택
- 언어/프레임워크: TypeScript, Next.js 14, React 18
- 데이터베이스: PostgreSQL
- 캐싱: Redis
- 마이그레이션: Prisma
- 로깅: Winston, Morgan
- 주요 라이브러리: 
  - 상태관리: Redux Toolkit
  - UI/스타일링: Tailwind CSS, shadcn/ui
  - 폼 관리: React Hook Form, Zod
  - API: tRPC, Axios
  - 테스트: Jest, React Testing Library
- 개발도구:
  - 패키지 매니저: pnpm
  - 린팅/포맷팅: ESLint, Prettier
  - Git 훅: Husky, lint-staged
- 테스트
  - storybook, jest, vitest

## 추가 기술 스택
- 인증/인가: NextAuth.js
- 모니터링: Sentry
- CI/CD: GitHub Actions
- 컨테이너화: Docker
- 배포: Vercel

## 3. 규칙 & 컨벤션
1.**규칙AI1(엔지니어 사고)**: 사용자 가치 및 문제 해결을 최우선으로 생각합니다.
2.**규칙AI2(인간을 위한 코드)**:
3.**규칙AI3(결과 중심)**: 필요한 경우 코드를 전면 재설계해도 좋으며, 실질적 가치 창출을 우선합니다.
4.**규칙AI4(일관 표준)**: ruff 등 정해진 표준 물로 일관성 유지합니다.
5.**규칙AIS(간단/명확)**: SOLID 원칙, 단일 책임 원칙을 준수하고 불필요한 복잡성을 지양합니다.
6.**규칙AI6(예측 가능)**: 테스트(단위•통합)와 guard clause를 통해 예측 가능한 동작을 보장합니다.
7.**규칙AI&7(빠르고 신중)**: 충분한 설계와 문서화를 통해 유지보수 비용을 줄입니다.
8.**규칙AI&8(예외 문서화)**: 규칙 예외나 특이사항이 있으면 주석/PRD에 이유 및 개선 방향을 명시합니다.


---
# FE
- 반응형 웹을 목표로 합니다.



---
# 코딩 표준 및 가이드라인

## 아키텍처
- 클린 아키텍처 원칙 준수
- 기능별 모듈화 구조 사용
- 재사용 가능한 컴포넌트 설계

## 코딩 스타일
- 함수형 컴포넌트와 React Hooks 사용
- TypeScript strict 모드 활성화
- 적절한 타입 정의 필수
- 최대 줄 길이: 100자
- 들여쓰기: 2칸 공백

## 성능 최적화
- React.memo() 적절히 사용
- 이미지 최적화 필수
- Code Splitting 활용
- 불필요한 리렌더링 방지

## 테스트
- 새로운 기능에 대한 단위 테스트 작성
- 테스트 커버리지 80% 이상 유지
- E2E 테스트는 주요 사용자 플로우에 대해 작성

## 문서화
- JSDoc 스타일 주석 사용
- README.md 최신 상태 유지
- API 문서화 필수
- 변경사항 CHANGELOG.md에 기록

## 보안
- 환경변수 적절히 관리
- API 엔드포인트 인증 필수
- XSS, CSRF 방어
- 민감한 정보 노출 방지

## Git 관리
- Conventional Commits 사용
- 브랜치 전략: GitHub Flow
- PR 템플릿 준수
- 코드 리뷰 필수

## 접근성
- WCAG 2.1 가이드라인 준수
- 시맨틱 HTML 사용
- 키보드 네비게이션 지원
- 스크린리더 호환성 확보

## design  Best Practices
- Implement responsive designs using Tailwind CSS




# 프로젝트 룰
## api
- prisma 객체는  "import { PrismaClient } from '@prisma/client', const prisma = new PrismaClient();" 이 모드의 prisma를 사용해야함 
  - ("import prisma from '@/lib/prisma';" 아님)

# 컨벤션
## 이벤트 핸들러 네이밍 컨벤션
- 이벤트 핸들러 함수는 'on' 접두사를 사용합니다
- 형식: on + 이벤트타입 + 대상
  - 예: onClick, onChange, onSubmit 등의 이벤트 타입 사용
  - 예: onClickWorkout, onChangeInput, onSubmitForm 등
- DOM 이벤트와 일치하는 이름을 사용하여 가독성을 높입니다
- 모든 컴포넌트에서 일관된 패턴으로 사용합니다
- 이유는 이벤트 핸들러가 아닌 redux 액션 함수를 호출할때도 handle prefix를 사용하는데 이때 구분해줘야 혼란이 없기 때문입니다.

### 예시
- onClickSubmit - 제출 버튼 클릭 이벤트
- onChangeEmail - 이메일 입력 변경 이벤트
- onFocusSearchInput - 검색 입력 필드 포커스 이벤트
- onBlurPasswordField - 비밀번호 필드 블러 이벤트

## API 호출 규칙
- fetch 대신 axios 사용 필수
  - 이유: 
    1. 더 나은 에러 처리
    2. 자동 JSON 변환
    3. 인터셉터 기능
    4. 타임아웃 설정 용이
    5. TypeScript 지원 우수
  - 예외: 브라우저 내장 API만 사용해야 하는 특수한 경우

# 컴포넌트 export 규칙
- 모든 컴포넌트의 export default는 파일 하단에 별도로 분리하여 작성합니다.
  - 예시: function Component() { ... } 
  - 예시: export default Component;

# 컴포넌트 네이밍 규칙
- 컴포넌트 이름은 항상 대문자로 시작합니다.
  - 예시: MyComponent, UserProfile, AdminDashboard